pipeline {
    agent any

    tools {
        maven "MAVEN"   // Must match Jenkins Maven tool configuration
        jdk "JDK-17"    // Use JDK 17 installed in Jenkins
    }

    environment {
        DOCKER_IMAGE = "rukevweubio/web-application"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIAL_ID = "docker_hub"
        GIT_BRANCH = "main"

        // Persistent cache directories
        DEP_CHECK_CACHED_DIR = "${HOME}/dependency-check-data"
        MAVEN_CACHE = "${HOME}/.m2/repository"
    }

    options {
        skipDefaultCheckout()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: "https://github.com/rukevweubio/Jenkins-Maven-Docker-ECR-Pipeline.git"
            }
        }

        stage('Maven Build') {
            steps {
                dir('my-webapp') {
                    sh "mvn clean package -DskipTests -Dmaven.repo.local=${MAVEN_CACHE}"
                }
            }
        }

        stage('Run JUnit Tests') {
            steps {
                dir('my-webapp') {
                    sh "mvn test -Dmaven.repo.local=${MAVEN_CACHE}"
                }
            }
            post {
                always {
                    junit 'my-webapp/target/surefire-reports/*.xml'
                }
            }
        }

        stage('JaCoCo Coverage') {
            steps {
                dir('my-webapp') {
                    sh "mvn jacoco:report -Dmaven.repo.local=${MAVEN_CACHE}"
                }
            }
            post {
                always {
                    jacoco execPattern: 'my-webapp/target/jacoco.exec',
                           classPattern: 'my-webapp/target/classes',
                           sourcePattern: 'my-webapp/src/main/java'
                }
            }
        }

        stage('Dependency Check (Cached)') {
            steps {
                dir('my-webapp') {
                    sh """
                        # Create cache directory if not exists
                        mkdir -p ${DEP_CHECK_CACHED_DIR}
                        
                        # Run OWASP Dependency-Check using cached DB
                        mvn org.owasp:dependency-check-maven:check \
                            -Dnvd.api.key=60e59b9f-d53a-4679-97ae-e5f3bb8eb7ac \
                            -DdataDirectory=${DEP_CHECK_CACHED_DIR} \
                            -Dmaven.repo.local=${MAVEN_CACHE} \
                            -Dformat=HTML \
                            -DfailBuildOnCVSS=7
                    """
                }
            }
        }

        // stage('Docker Build & Push') {
        //     steps {
        //         script {
        //             sh """
        //                 docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} my-webapp
        //                 echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
        //                 docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
        //             """
        //         }
        //     }
        // }
    // }

    // // post {
    // //     always {
    // //         echo "Workspace cleanup completed."
    // //         cleanWs()
    // //     }
    // //     success {
    // //         echo "Pipeline finished successfully!"
    // //     }
    // //     failure {
    // //         echo "Pipeline failed! Check console output for errors."
    //     }
    }
}
