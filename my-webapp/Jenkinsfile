pipeline {
    agent any

    tools {
        maven "MAVEN"
        jdk "JDK-17"
    }

    environment {
        PATH = "/usr/local/bin:$PATH"
        DOCKER_IMAGE = "rukevweubio/web-application"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIAL_ID = "docker_ubiohub"
        GIT_BRANCH = "main"
        AWS_REGION = "us-east-1"
        ECR_REPO = "059254148810.dkr.ecr.us-east-1.amazonaws.com/my-jenkin-pipeline-maven-webapp"

        DEP_CHECK_CACHED_DIR = "${HOME}/dependency-check-data"
        MAVEN_CACHE = "${HOME}/.m2/repository"
        TRIVY_CACHE_DIR = "/var/lib/jenkins/.cache/trivy"
    }

    options {
        skipDefaultCheckout()
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: "https://github.com/rukevweubio/Jenkins-Maven-Docker-ECR-Pipeline.git"
            }
        }

        stage('Maven Build & Test') {
            steps {
                dir('my-webapp') {
                    sh """
                        mvn clean package -Dmaven.repo.local=${MAVEN_CACHE}
                        mvn test -Dmaven.repo.local=${MAVEN_CACHE}
                    """
                }
            }
            post {
                always {
                    junit 'my-webapp/target/surefire-reports/*.xml'
                }
            }
        }

        stage('JaCoCo Coverage') {
            steps {
                dir('my-webapp') {
                    sh "mvn jacoco:report -Dmaven.repo.local=${MAVEN_CACHE}"
                }
            }
            post {
                always {
                    jacoco execPattern: 'my-webapp/target/jacoco.exec',
                           classPattern: 'my-webapp/target/classes',
                           sourcePattern: 'my-webapp/src/main/java'
                }
            }
        }

        stage('Dependency Check') {
            steps {
                dir('my-webapp') {
                    sh """
                        mkdir -p ${DEP_CHECK_CACHED_DIR}
                        mvn org.owasp:dependency-check-maven:check \
                            -Dnvd.api.key=60e59b9f-d53a-4679-97ae-e5f3bb8eb7ac \
                            -DdataDirectory=${DEP_CHECK_CACHED_DIR} \
                            -Dmaven.repo.local=${MAVEN_CACHE} \
                            -Dformat=HTML
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'my-webapp/target/dependency-check-report.html', fingerprint: true
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
                    dir('my-webapp') {
                        sh """
                            mvn verify sonar:sonar \
                                -Dsonar.projectKey=rukevweubio_Jenkins-Maven-Docker-ECR-Pipeline \
                                -Dsonar.organization=rukevweubio-1 \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.login=$SONAR_TOKEN \
                                -Dmaven.repo.local=${MAVEN_CACHE}
                        """
                    }
                }
            }
        }

        stage('Docker Build & Trivy Scan') {
            steps {
                dir('my-webapp') {
                    sh """
                        docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

                        mkdir -p ${TRIVY_CACHE_DIR}
                        trivy image \
                            --severity HIGH,CRITICAL \
                            --exit-code 0 \
                            --cache-dir ${TRIVY_CACHE_DIR} \
                            --format table \
                            -o trivy-report.txt \
                            $DOCKER_IMAGE:$DOCKER_TAG
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'my-webapp/trivy-report.txt', fingerprint: true
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKER_CREDENTIAL_ID}",
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD')]) {
                    dir('my-webapp') {
                        sh """
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            docker push $DOCKER_IMAGE:$DOCKER_TAG
                        """
                    }
                }
            }
        }

        stage('Push Docker Image to AWS ECR') {
            steps {
                            withAWS(credentials: 'aws-jenkins', region: "$AWS_REGION") {
                sh """
                    aws ecr describe-repositories --repository-names my-jenkin-pipeline-maven-webapp || \
                    aws ecr create-repository --repository-name my-jenkin-pipeline-maven-webapp

                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_REPO

                    docker tag $DOCKER_IMAGE:$DOCKER_TAG $ECR_REPO:$DOCKER_TAG
                    docker push $ECR_REPO:$DOCKER_TAG
                """
                }
            }
        }
    }
}
