pipeline {
    agent any

    tools {
        maven "MAVEN"   // Ensure this matches the Jenkins Maven tool configuration
        jdk "JDK-17"    // Use JDK 17 installed in Jenkins
    }

    environment {
        DOCKER_IMAGE = "rukevweubio/web-application"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIAL_ID = "docker_hub"
        GIT_BRANCH = "main"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the specified branch from Git
                git branch: "${GIT_BRANCH}", url: "https://github.com/rukevweubio/Jenkins-Maven-Docker-ECR-Pipeline.git"
            }
        }

        stage('Maven Build') {
            steps {
                dir('my-webapp') {
                    // Build the Maven project, skipping tests
                    sh "mvn clean package -DskipTests"
                }
            }
        }

        stage('Run JUnit Tests') {
            steps {
                dir('my-webapp') {
                    // Execute the unit tests
                    sh "mvn test"
                }
            }
            post {
                always {
                    // Publish JUnit test results
                    junit 'my-webapp/target/surefire-reports/*.xml'
                }
            }
        }

        stage('JaCoCo Coverage') {
            steps {
                dir('my-webapp') {
                    // Generate JaCoCo coverage report
                    sh "mvn jacoco:report"
                }
            }
            post {
                always {
                    // Publish JaCoCo coverage report
                    jacoco execPattern: 'my-webapp/target/jacoco.exec', classPattern: 'my-webapp/target/classes', sourcePattern: 'my-webapp/src/main/java', exclusionPattern: ''
                }
            }
        }

        stage('Dependency Check') {
            steps {
                dir('my-webapp') {
                    // Run OWASP Dependency-Check
                    sh "mvn org.owasp:dependency-check-maven:check"
                }
            }
            post {
                always {
                    // Archive Dependency-Check report
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'my-webapp/target/dependency-check-report',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency-Check Report'
                    ])
                }
            }
        }

        // Additional stages can be added here, like Docker Build and Deployment if needed.
    }

    post {
        always {
            // Clean up workspace after the pipeline run
            cleanWs()
        }
    }
}